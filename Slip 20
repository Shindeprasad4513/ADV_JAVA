//1.Create a JSP page to accept a number from a user and display it in words:
//Example: 123 â€“ One Two Three. The output should be in red color. [10 M]

<%@ page language="java" contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
    <title>Number to Words (Switch Case)</title>
</head>
<body>
    <h3>Enter a Number:</h3>
    <form method="post" action="">
        <input type="text" name="num" required>
        <input type="submit" value="Show in Words">
    </form>

<%
if (request.getParameter("num") != null) {
    String num = request.getParameter("num");
    String words = "";

    for (int i = 0; i < num.length(); i++) {
        char ch = num.charAt(i);

        switch(ch) {
            case '0': words += "Zero "; break;
            case '1': words += "One "; break;
            case '2': words += "Two "; break;
            case '3': words += "Three "; break;
            case '4': words += "Four "; break;
            case '5': words += "Five "; break;
            case '6': words += "Six "; break;
            case '7': words += "Seven "; break;
            case '8': words += "Eight "; break;
            case '9': words += "Nine "; break;
            default: 
                words = "Invalid Input (Digits Only)";
                break;
        }
    }
%>

    <h2 style="color:red;">Number in Words: <%= words %></h2>

<%
}
%>
</body>
</html>



//2.Write a program to solve producer consumer problem in which a producer produces a value and consumer consume the value before producer generate the next value. (Hint: use thread synchronization).
package prasad;
import java.util.*;
class producer extends Thread
{
	product p;
	producer(product p)
	{
		this.p=p;
	}
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			try 
			{
               p.produce(i);				
			}catch(Exception e)
			{
				System.out.println(e);
			}
		}
	}
}
class consumer extends Thread
{
	product p;
	public consumer(product p)
	{
		this.p=p;
	}
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			try 
			{
				p.consume(i);
			}catch(Exception e)
			{
				System.out.println(e);
			}
		}
	}
}


class product 
{
   boolean chance;
   synchronized void produce(int i)throws InterruptedException
   {
	   if(chance)
	   {
		   wait();
	   }
	   chance=true;
	   notify();
	   System.out.println("Produce "+i+" value");
   }
   synchronized void consume(int i)throws InterruptedException
   {
	   if(!chance)
	   {
		   wait();
	   }
	   chance=false;
	   notify();
	   System.out.println("Consume "+i+" value");
   }
}
 
public class slip20b 
{
	public static void main(String[] args) 
	{
       product p=new product();
       producer t1=new producer(p);
       consumer t2=new consumer(p);
       t1.start();t2.start();
	}
}



